// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// User Management
// ================================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String?  @unique
  firstName   String?
  lastName    String?
  displayName String?
  avatar      String?
  
  // Authentication
  passwordHash String?
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // Password Reset
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  // OAuth
  googleId String?
  facebookId String?
  appleId String?
  
  // Profile
  bio String?
  birthDate DateTime?
  gender String?
  location String?
  website String?
  
  // Privacy & Preferences
  isPrivate Boolean @default(false)
  allowAnalytics Boolean @default(true)
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  
  // Subscription & Features
  subscriptionTier String @default("free") // free, premium, enterprise
  subscriptionExpires DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  isActive Boolean @default(true)
  
  // Relationships
  items Item[]
  collections Collection[]
  follows Follow[] @relation("Follower")
  followers Follow[] @relation("Following")
  analytics UserAnalytics?
  sessions Session[]
  priceAlerts PriceAlert[]
  
  @@map("users")
  @@index([email])
  @@index([username])
  @@index([createdAt])
  @@index([subscriptionTier])
}

model Session {
  id String @id @default(cuid())
  userId String
  token String @unique
  refreshToken String? @unique
  expiresAt DateTime
  deviceInfo String?
  ipAddress String?
  userAgent String?
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// ================================
// Item Management
// ================================

model Item {
  id String @id @default(cuid())
  userId String
  
  // Basic Info
  name String
  brand String?
  description String?
  category String // tops, bottoms, shoes, accessories, outerwear, dresses, other
  subcategory String?
  
  // Product Details
  price Decimal? @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  currency String @default("USD")
  sku String?
  size String?
  color String?
  material String?
  careInstructions String?
  
  // Purchase Info
  status String @default("want") // want, purchased, owned, sold, donated
  purchaseDate DateTime?
  purchaseLocation String?
  
  // Media
  images String[] // Array of image URLs
  primaryImage String? // Main image URL
  
  // External Links
  originalUrl String?
  affiliateUrl String?
  
  // Organization
  tags String[]
  notes String?
  
  // Social Features
  isPublic Boolean @default(false)
  likes Int @default(0)
  views Int @default(0)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  archivedAt DateTime?
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionItems CollectionItem[]
  priceAlerts PriceAlert[]
  
  @@map("items")
  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([createdAt])
  @@index([brand])
  @@index([isPublic])
  @@fulltext([name, brand, description, tags])
}

// ================================
// Collections & Organization
// ================================

model Collection {
  id String @id @default(cuid())
  userId String
  
  name String
  description String?
  color String? // For UI theming
  icon String? // Icon identifier
  
  // Privacy
  isPublic Boolean @default(false)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CollectionItem[]
  
  @@map("collections")
  @@index([userId])
  @@index([isPublic])
  @@index([createdAt])
}

model CollectionItem {
  id String @id @default(cuid())
  collectionId String
  itemId String
  
  // Custom order within collection
  order Int @default(0)
  
  // Custom notes for this item in this collection
  notes String?
  
  createdAt DateTime @default(now())
  
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, itemId])
  @@map("collection_items")
  @@index([collectionId])
  @@index([itemId])
}

// ================================
// Social Features
// ================================

model Follow {
  id String @id @default(cuid())
  followerId String
  followingId String
  
  createdAt DateTime @default(now())
  
  follower User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
  @@index([followerId])
  @@index([followingId])
}

// ================================
// Analytics & Insights
// ================================

model UserAnalytics {
  id String @id @default(cuid())
  userId String @unique
  
  // Item Statistics
  totalItems Int @default(0)
  totalValue Decimal @default(0) @db.Decimal(10, 2)
  totalSpent Decimal @default(0) @db.Decimal(10, 2)
  averageItemPrice Decimal @default(0) @db.Decimal(10, 2)
  
  // Category Breakdown
  categoryBreakdown Json? // {tops: 10, bottoms: 5, etc.}
  brandBreakdown Json? // {nike: 5, adidas: 3, etc.}
  colorBreakdown Json? // {black: 8, white: 6, etc.}
  
  // Shopping Patterns
  mostActiveMonth String?
  preferredBrands String[]
  averageMonthlySpending Decimal @default(0) @db.Decimal(10, 2)
  
  // Engagement
  totalLogins Int @default(0)
  streak Int @default(0) // Days of consecutive usage
  longestStreak Int @default(0)
  
  // Metadata
  lastCalculatedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_analytics")
  @@index([userId])
}

// ================================
// Price Tracking & Alerts
// ================================

model PriceAlert {
  id String @id @default(cuid())
  userId String
  itemId String?
  
  // Alert Configuration
  productUrl String
  targetPrice Decimal @db.Decimal(10, 2)
  currentPrice Decimal? @db.Decimal(10, 2)
  currency String @default("USD")
  
  // Alert Status
  isActive Boolean @default(true)
  isTriggered Boolean @default(false)
  triggeredAt DateTime?
  
  // Notification Settings
  emailNotification Boolean @default(true)
  pushNotification Boolean @default(true)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastCheckedAt DateTime?
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item? @relation(fields: [itemId], references: [id], onDelete: SetNull)
  
  @@map("price_alerts")
  @@index([userId])
  @@index([itemId])
  @@index([isActive])
  @@index([lastCheckedAt])
}

// ================================
// System & Configuration
// ================================

model AppConfig {
  id String @id @default(cuid())
  key String @unique
  value String
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("app_config")
  @@index([key])
}

model AuditLog {
  id String @id @default(cuid())
  userId String?
  action String
  resourceType String
  resourceId String?
  details Json?
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([createdAt])
}

// ================================
// Enums
// ================================

enum ItemCategory {
  TOPS
  BOTTOMS
  SHOES
  ACCESSORIES
  OUTERWEAR
  DRESSES
  OTHER
}

enum ItemStatus {
  WANT
  PURCHASED
  OWNED
  SOLD
  DONATED
  ARCHIVED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum SubscriptionTier {
  FREE
  PREMIUM
  ENTERPRISE
} 